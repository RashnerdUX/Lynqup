from django.shortcuts import render
from django.contrib.auth import authenticate, login, get_user_model
from rest_framework.views import APIView
from rest_framework.generics import GenericAPIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from django.utils.http import urlsafe_base64_decode, urlsafe_base64_encode
from django.utils.encoding import force_bytes
from django.utils.encoding import force_str
from django.contrib.auth.tokens import default_token_generator
import logging
from users.serializers import RegisterSerializer, LoginSerializer
from django.core.mail import send_mail
from django.conf import settings
from drf_spectacular.utils import extend_schema

from users.serializers import GoogleAuthSerializer


logger = logging.getLogger(__name__)
User = get_user_model()

@extend_schema(
    request=RegisterSerializer,
    responses={201: None, 400: None},
    description="Register a new user and send email confirmation."
)
class RegisterView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = RegisterSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        username = user.username
        email = user.email
        #Send email confirmation here
        uidb64 = urlsafe_base64_encode(force_bytes(user.pk)) #Encode user pk
        token= default_token_generator.make_token(user) #Generate token
        confirmation_url = f"http://localhost:8000/api/users/confirm-email/{uidb64}/{token}/"

        print(token)
        print(uidb64)
        #Reserve this for now
        """send_mail(
            subject='Confirm your email',
            message=f'Please click the following link to confirm your email: {confirmation_url}',
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[email],
            fail_silently=False,
        )"""
        logger.info(f'User registered: {username} ({email})')
        return Response({'message': 'User registered. Please confirm your email.'}, status=status.HTTP_201_CREATED)

@extend_schema(
    request=LoginSerializer,
    responses={200: None, 401: None},
    description="Login a user and return authentication tokens."
)
class LoginView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = LoginSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.validated_data
            auth_tokens = user.get_user_auth_token()
            username = user.username
            logger.info(f'User logged in: {username}')
            return Response(auth_tokens, status=status.HTTP_200_OK)
        identifier = ""
        if request.data.get('username'):
            identifier = request.data.get('username')
        else:
            identifier = request.data.get('email')

        logger.warning(f'Login failed for username: {identifier}: {serializer.errors}')
        return Response({'error': 'Invalid credentials.'}, status=status.HTTP_401_UNAUTHORIZED)

@extend_schema(
    parameters=[
        {"name": "uidb64", "required": True, "type": str, "description": "Base64 encoded user id"},
        {"name": "token", "required": True, "type": str, "description": "Email confirmation token"},
    ],
    responses={200: None, 400: None},
    description="Confirm user email using uidb64 and token."
)
class EmailConfirmationView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, uidb64, token):
        """
        Takes an encoded form of the user's id and a random token generated by Django associated with the user to verify
        """
        try:
            uid = force_bytes(urlsafe_base64_decode(uidb64)).decode()
            user = User.objects.get(pk=uid)
        except (TypeError, ValueError, OverflowError, User.DoesNotExist):
            user = None
        
        if user is not None and default_token_generator.check_token(user, token):
            user.is_active = True
            user.save()
            logger.info(f'Email confirmed for user: {user.username}')
            return Response({'message': 'Email confirmed. You can now log in.'}, status=status.HTTP_200_OK)
        logger.warning('Invalid email confirmation link')
        return Response({'error': 'Invalid confirmation link.'}, status=status.HTTP_400_BAD_REQUEST)

class GoogleSignInView(GenericAPIView):
    serializer_class = GoogleAuthSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)

        if serializer.is_valid():
            data = serializer.validated_data.get('auth_token')
            #logger.info(f"Successfully signed in - {data.get('username')}")
            return Response(data, status=status.HTTP_200_OK)
        
        logger.warning('Failed to authenticate user with Google Sign-in')
        return Response(serializer.errors, status=status.HTTP_401_UNAUTHORIZED)

